const { Op, Sequelize } = require('sequelize');
const { Lot, Offer, Deal, Auction, AuctionParticipant, User } = require('../models');
const cron = require('node-cron');
const dayjs = require('dayjs');
const utc = require('dayjs/plugin/utc');
const timezone = require('dayjs/plugin/timezone');

dayjs.extend(utc);
dayjs.extend(timezone);



exports.createAuction = async (createAuction, user_id) => {
  try {
    const auction = await Auction.create({ user_id, ...createAuction });
    return auction
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞', error: err.message }));
  }
};

exports.scheduledLots = () => {
  cron.schedule('* * * * *', async () => {
const bishkekTime = dayjs().tz('Asia/Bishkek');
const now = bishkekTime.toDate();
console.log('üü¢ formatted', now.toISOString()); // –Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-06-26 10:50:00.000+06:00
// console.log('üü¢ scheduledLots', );

    try {
      // –ò—â–µ–º –∞—É–∫—Ü–∏–æ–Ω—ã —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
      const auctions = await Auction.findAll({
        where: {
          status: 'open',
          closing_type: 'auto',
          end_time: { [Op.lte]: now }
        },
        include: [{
          model: Lot,
          as: 'lots',
          required: false,
          where: { status: 'open' },
          include: [{
            model: Offer,
            as: 'offers',
            separate: true,
            order: [['percent', 'DESC']],
            limit: 1
          }]
        }]
      });
      console.log('üü¢ auctions', auctions.length);
      for (const auction of auctions) {
        for (const lot of auction.lots) {
          try {
            const bestOffer = lot.offers?.[0];

            if (bestOffer) {
              lot.winner_user_id = bestOffer.user_id;
              lot.winner_offer_id = bestOffer.id;
              lot.status = 'finished';
              bestOffer.status = 'finished';
              await bestOffer.save();
              await Deal.create({
                auction_id: auction.id,
                lot_id: lot.id,
                offer_id: bestOffer.id,
                user_id: bestOffer.user_id,
                percent: bestOffer.percent,
                amount: bestOffer.volume
              });
            } else {
              lot.status = 'expired';
            }

            await lot.save();
            console.log(`[${now.toISOString()}] ‚úÖ –ê—É–∫—Ü–∏–æ–Ω—ã –∏ –ª–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã`);
          } catch (err) {
            console.error(`[Lot Error] ${lot.id}:`, err.message);
          }
        }

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
        await auction.update({ status: 'finished' });

      }
    } catch (err) {
      console.error('[CRON ERROR]:', err.message);
    }
  });
};


exports.getAuctions = async (user_id) => {
  try {
    const auctions = await Auction.findAll({
      order: [['createdAt', 'DESC']],
      include: [{
        model: Lot,
        as: 'lots'
      }]
    });
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participantRecords = await AuctionParticipant.findAll({
      where: {
        user_id,
        status: 'approved', // —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
      },
    });

    const accessMap = new Set(participantRecords.map(p => p.auction_id));

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–æ—Å—Ç—É–ø–∞
    const result = auctions.map(auction => {
      return {
        ...auction.toJSON(),
        has_access: accessMap.has(auction.id)
      };
    });

    return result
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤', error: err.message }));
  }
};

exports.getAuctionLots = async (auction_id) => {
  try {
    const lotsWithOffers = await Lot.findAll({
      where: { auction_id },
      include: [
        {
          model: Offer,
          as: 'offers',
          include: [
            {
              model: User,
              as: 'user',
              attributes: ['id', 'name', 'email'],
            }
          ],
        },
      ],
      order: [['createdAt', 'ASC']],
    });
    console.log('üü¢ lotsWithOffers', lotsWithOffers)
    return lotsWithOffers;
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', error: err.message }));
  }
};

exports.getAuctionSelfOffer = async (auction_id, user_id) => {
  try {
    const lots = await Lot.findAll({
      where: { auction_id },
      include: [
        {
          model: Offer,
          as: 'offers',
          where: { user_id },
          required: false, // —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç—ã –¥–∞–∂–µ –±–µ–∑ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        },
      ],
      order: [['createdAt', 'ASC']],
    });

    return lots;
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', error: err.message }));
  }
};

exports.joinAuction = async (auction_id, user_id) => {
  try {
    return await AuctionParticipant.findOrCreate({
      where: { user_id, auction_id }
    });
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞—É–∫—Ü–∏–æ–Ω—É', error: err.message }));
  }
};


exports.closeLotManually = async (lot_id, offer_id) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ—Ç–∞
    const lot = await Lot.findByPk(lot_id);
    if (!lot) {
      throw new Error(JSON.stringify({ message: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞
    const offer = await Offer.findOne({
      where: {
        id: offer_id,
        lot_id: lot.id,
      },
    });
    if (!offer) {
      throw new Error(JSON.stringify({ message: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }));
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â—É—é —Å–¥–µ–ª–∫—É
    const isDeal = await Deal.findOne({
      where: {
        lot_id: lot.id,
        offer_id: offer.id,
        user_id: offer.user_id,
      },
    });
    if (isDeal) {
      throw new Error(JSON.stringify({ message: '–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —ç—Ç–æ—Ç –ª–æ—Ç' }));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ª–æ—Ç–∞
    lot.winner_user_id = offer.user_id;
    lot.winner_offer_id = offer.id;
    lot.status = 'finished';
    await lot.save();

    // –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
    const deal = await Deal.create({
      auction_id: lot.auction_id,
      lot_id: lot.id,
      offer_id: offer.id,
      user_id: offer.user_id,
      percent: offer.percent,
      amount: offer.volume || null
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –ª–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –∞—É–∫—Ü–∏–æ–Ω
    const openLots = await Lot.count({
      where: {
        auction_id: lot.auction_id,
        status: 'open'
      }
    });
    if (openLots === 0) {
      await Auction.update(
        { status: 'finished' },
        { where: { id: lot.auction_id } }
      );
    }

    return deal;
  } catch (error) {
    throw new Error(JSON.stringify({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ª–æ—Ç–∞',
      error: error.message,
    }));
  }
};

exports.closeAuctionManually = async (auction_id) => {
  try {
    const auction = await Auction.findByPk(auction_id, {
      include: [{
        model: Lot,
        as: 'lots',
        required: false,
        where: { status: 'open' },
        include: [{
          model: Offer,
          as: 'offers',
          separate: true,
          order: [['percent', 'DESC']],
          limit: 1
        }]
      }]
    });

    if (!auction) {
      throw new Error(JSON.stringify({ message: '–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' }));
    }

    for (const lot of auction.lots) {
      const bestOffer = lot.offers?.[0];

      if (bestOffer) {
        lot.winner_user_id = bestOffer.user_id;
        lot.winner_offer_id = bestOffer.id;
        lot.status = 'finished';
        bestOffer.status = 'accepted';
        await Deal.create({
          auction_id: auction.id,
          lot_id: lot.id,
          offer_id: bestOffer.id,
          user_id: bestOffer.user_id,
          percent: bestOffer.percent,
          amount: bestOffer.volume
        });
        await bestOffer.save();
      } else {
        lot.status = 'expired';
      }

      await lot.save();
    }

    await auction.update({ status: 'finished' });

    return { message: '–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à—ë–Ω' };
  } catch (error) {
    throw new Error(JSON.stringify({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞',
      error: error.message,
    }));
  }
};


exports.checkForOwnAuction = async (auction_id, user_id) => {
  try {
    const auction = await Auction.findOne({ where: { id: auction_id, user_id } });
    if(!auction) {
      return false
    }
    return true
  } catch (err) {
    throw new Error(JSON.stringify({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É–∫—Ü–∏–æ–Ω–∞', error: err.message }));
  }
};

exports.approveParticipant = async (auction_id, user_id, initiator_id, status) => {
  try {
    console.log('üü¢ approveParticipant', auction_id, user_id, initiator_id, status)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const auction = await Auction.findByPk(auction_id);
    if (!auction) {
      throw new Error('–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    // if (auction.user_id !== initiator_id) {
    //   throw new Error('–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤');
    // }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = await AuctionParticipant.findOne({
      where: {
        auction_id,
        user_id,
      },
    });

    if (!participant) {
      throw new Error('–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    participant.status = status;
    await participant.save();

    return participant
  } catch (err) {
    throw new Error(JSON.stringify({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
      error: err.message,
    }));
  }
};

exports.report = async (req, res) => {
  try {
    const { id } = req.params;
    const auction = await Auction.findByPk(id, {
      include: [{
        model: Lot,
        as: 'lots',
        include: [
          {
            model: Offer,
            as: 'winner_offer',
            required: false,

          },
          {
            model: User,
            as: 'winner',
            attributes: ['id', 'name'],
            required: false
          }
        ]
      }]
    });
    res.json(auction);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞', error: error.message });
  }
};
